// Code generated by "enumer -type=RecordType -trimprefix RecordType -output record_type_gen.go"; DO NOT EDIT.

package dns

import (
	"fmt"
)

const (
	_RecordTypeName_0 = "A"
	_RecordTypeName_1 = "AAAA"
	_RecordTypeName_2 = "NAPTR"
)

var (
	_RecordTypeIndex_0 = [...]uint8{0, 1}
	_RecordTypeIndex_1 = [...]uint8{0, 4}
	_RecordTypeIndex_2 = [...]uint8{0, 5}
)

func (i RecordType) String() string {
	switch {
	case i == 1:
		return _RecordTypeName_0
	case i == 28:
		return _RecordTypeName_1
	case i == 35:
		return _RecordTypeName_2
	default:
		return fmt.Sprintf("RecordType(%d)", i)
	}
}

var _RecordTypeValues = []RecordType{1, 28, 35}

var _RecordTypeNameToValueMap = map[string]RecordType{
	_RecordTypeName_0[0:1]: 1,
	_RecordTypeName_1[0:4]: 28,
	_RecordTypeName_2[0:5]: 35,
}

// RecordTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func RecordTypeString(s string) (RecordType, error) {
	if val, ok := _RecordTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to RecordType values", s)
}

// RecordTypeValues returns all values of the enum
func RecordTypeValues() []RecordType {
	return _RecordTypeValues
}

// IsARecordType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i RecordType) IsARecordType() bool {
	for _, v := range _RecordTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
